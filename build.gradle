buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.9'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'org.jetbrains.kotlin.jvm' version '1.1.1'
    id 'maven-publish'
    id 'idea'
}

apply plugin: 'org.jetbrains.dokka'

group 'club.minnced'
version '1.ALPHA.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

task sources(type: Copy) {
    from 'src/main/kotlin'
    into "$buildDir/sources"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    logging.level = LogLevel.QUIET
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    dependsOn sources
    classifier = 'sources'
    from sources.destinationDir.path
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

build {
    dependsOn publishToMavenLocal
}

publishing {
    publications {
        maven(MavenPublication) {

            groupId 'com.github.MinnDevelopment'
            artifactId 'gunfire'
            version project.version

            artifact jar {
                classifier ''
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

            artifact sourcesJar {
                classifier 'sources'
            }

        }
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.1'
    testCompile 'org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.1'

    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.14'
    testCompile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.14'

    testCompile 'junit:junit:4.12'

    compile 'org.jetbrains.kotlin:kotlin-reflect:1.1.1'

    //compile 'org.slf4j:slf4j-api:1.7.9'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
